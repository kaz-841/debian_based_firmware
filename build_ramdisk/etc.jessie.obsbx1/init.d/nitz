#! /bin/bash
### BEGIN INIT INFO
# Provides:          nitz
# Required-Start:    $local_fs $syslog $remote_fs
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:
# Short-Description: get NITZ for OBS IoT
# Description:       
### END INIT INFO
#
# Copyright (c) 2013-2016 Plat'Home CO., LTD.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY PLAT'HOME CO., LTD. AND CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL PLAT'HOME CO., LTD. AND CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/usr/local/sbin:/sbin:/usr/sbin:/bin:/usr/bin
DESC="get NITZ for obs iot"
NAME=nitz
SCRIPTNAME=/etc/init.d/$NAME
GPIOPATH="/sys/class/gpio"
ATCMD=/usr/sbin/atcmd

# Read configuration variable file if it is present
[ -r /etc/default/openblocks ] && . /etc/default/openblocks

set_time_ehs6(){
	# check builtin MODEM
	echo -n "nitz: 3G modem power on : "
	$ATCMD PON
	if [ ! -e /dev/ttyACM0 ]; then
		echo "fail"
		exit 1
	fi
	echo "done"

	echo -n "nitz: check SIM card : "
	# check SIM card
	val=`$ATCMD CCID`
	if [ $? == 255 ]; then
		echo "fail"
#		$ATCMD POFF
		exit 1
	fi
	echo "done"

	echo -n "nitz: time synchronization : "
	val=`$ATCMD SIND`
	if [ $? == 255 ]; then
		echo "fail"
#		$ATCMD POFF
		exit 1
	fi
	echo "done"

	# set NITZ to SYSTEM
	date "$val" --utc
	# set SYSTEM to RTC
	hwclock --systohc
#	$ATCMD POFF
}

set_time_u200(){
	# check builtin MODEM
	echo -n "nitz: 3G modem power on : "
	$ATCMD PON
	if [ ! -e /dev/ttyACM0 ]; then
		echo "fail"
		exit 1
	fi
	echo "done"

	echo -n "nitz: check SIM card : "
	# check SIM card
	val=`$ATCMD CCID`
	if [ $? == 255 ]; then
		echo "fail"
#		$ATCMD POFF
		exit 1
	fi
	echo "done"

	echo -n "nitz: time synchronization : "
	val=`$ATCMD CCLK`
	if [ $? == 255 ]; then
		echo "fail"
#		$ATCMD POFF
		exit 1
	fi
	echo "done"

	# set NITZ to SYSTEM
	date "$val"
	# set SYSTEM to RTC
	hwclock --systohc
#	$ATCMD POFF
}

set_time_kym11(){
	echo "done"
}

case "$1" in
  start)
	MODEM=`/usr/sbin/obsiot-modem.sh`
	case $MODEM in
	U200E)
		echo 200 > $GPIOPATH/export	# 3G modem power
		echo out > $GPIOPATH/gpio200/direction
		echo 1 > $GPIOPATH/gpio200/value
		echo 202 > $GPIOPATH/export	# 3G reset
		echo out > $GPIOPATH/gpio202/direction
		echo 1 > $GPIOPATH/gpio202/value
		;;
	KYM11)
		echo 202 > $GPIOPATH/export	# 3G reset
		echo out > $GPIOPATH/gpio202/direction
		echo 1 > $GPIOPATH/gpio202/value
		echo 200 > $GPIOPATH/export	# 3G modem power
		echo out > $GPIOPATH/gpio200/direction
		echo 0 > $GPIOPATH/gpio200/value
		if [ ! -e /dev/ttyACM0 ]; then
			echo 1 > $GPIOPATH/gpio200/value
			sleep 17
			echo 0 > $GPIOPATH/gpio200/value
		fi
		;;
	EHS6)
		echo 165 > $GPIOPATH/export	# 3G modem power
		echo out > $GPIOPATH/gpio165/direction
		echo 0 > $GPIOPATH/gpio165/value
		echo 15 > $GPIOPATH/export	# 3G reset
		echo out > $GPIOPATH/gpio15/direction
		echo 0 > $GPIOPATH/gpio15/value
		;;
	U200)
		echo 165 > $GPIOPATH/export	# 3G modem power
		echo out > $GPIOPATH/gpio165/direction
		echo 1 > $GPIOPATH/gpio165/value
		echo 15 > $GPIOPATH/export	# 3G reset
		echo out > $GPIOPATH/gpio15/direction
		echo 0 > $GPIOPATH/gpio15/value
		;;
	*)
		;;
	esac

	# set LED, INIT
	echo 47 > $GPIOPATH/export	# LED red
	echo out > $GPIOPATH/gpio47/direction
	echo 48 > $GPIOPATH/export	# LED green
	echo out > $GPIOPATH/gpio48/direction
	echo 49 > $GPIOPATH/export	# LED blue
	echo out > $GPIOPATH/gpio49/direction
	echo 14 > $GPIOPATH/export	# INIT SW
	echo both > $GPIOPATH/gpio14/edge

	# check init sw
	grep -q 'noflashcfg=1' /proc/cmdline
	if [ $? == 0 ]; then
		echo "nitz: push INIT switch"
		exit 1
	fi

	if [ $MODEM == "EHS6" ]; then
		set_time_ehs6
	elif [ $MODEM == "U200" ]; then
		set_time_u200
	elif [ $MODEM == "U200E" -o $MODEM == "KYM11" ]; then
		echo "nitz: skipped time synchronization"
	else
		echo "fail"
		exit 1
	fi

	rfkill unblock bluetooth
	exit 0
	;;
  stop)
	;;
  settime)
		MODEM=`/usr/sbin/obsiot-modem.sh`
		case $MODEM in
		EHS6)
			set_time_ehs6
		;;
		U200*)
			set_time_u200
		;;
		KYM11)
		;;
		*)
		;;
		esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|settime}" >&2
	exit 3
	;;
esac

