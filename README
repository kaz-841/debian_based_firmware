OpenBlocksファームウェア作成ガイド

ぷらっとホーム株式会社

Copyright (c) 2013 Plat'Home CO., LTD.

1. はじめに

このソフトウェアを使えばOpenBlocks(AX3, A7, A6, 600)のファームウェア
を作成することができます。内容は、シェルスクリプトとファームウェアに
含めるファイルです。

2. 対応ファームウェア

OpenBlocksのファームウェアは、機種(AX3, A7, A6, 600)とOS(Debian
GNU/Linux)によって異なります。対応しているファームウェアは下の表をご
覧ください。

機種 | Debian | 作成ホスト | TARGET | DIST    | ARCH
=====|========|============|========|=========|========
AX3  | 7      | 7/amd64    | obsax3 | wheezy  | armhf
-----+--------+------------+--------+---------|--------
AX3  | 6      | 6/amd64    | obsax3 | squeeze | armel
-----+--------+------------+--------+---------|--------
A7   | 7      | 7/amd64    | obsa7  | wheezy  | armel
-----+--------+------------+--------+---------|--------
A6   | 7      | 7/amd64    | obsa6  | wheezy  | armel
-----+--------+------------+--------+---------|--------
A6   | 6      | 6/amd64    | obsa6  | squeeze | armel
-----+--------+------------+--------+---------|--------
600  | 7      | 6/i386     | obs600 | wheezy  | powerpc

ファームウェアを作成するホストのOSはDebian GNU/Linuxです。そのバージ
ョンとアーキテクチャは、ファームウェアの対象となる機種とOSによって異
ります。表の作成ホストに「バージョン/アーキテクチャ」を記述しました。

項目TARGETとDISTは、ファームウェアを作成するときに実行するシェルスク
リプトに指定する文字列です。後節で参照します。

3. 準備

3.1. 作成ホスト

前節の表で、ファームウェアを作成するホストのOSを確認してください。例
えば、機種がOpenBlocks AX3でOSがDebian 7の場合、作成ホストのOSは
Debian 7/amd64です。ホストを用意して、そのOSをインストールします。ホ
ストは物理マシンと仮想マシンのどちらでもよろしいです。インターネット
に接続できるよう、ネッワークの設定をしてください。

3.2. Gitリポジトリの取得

このソフトウェアはGitリポジトリから取得できます。

作成ホストにgit-coreパッケージをインストールします。

  # apt-get update
  # apt-get install git-core

Gitリポジトリを取得します。

  $ git clone http://git.hqlabo.plathome.co.jp/git/debian_based_firmware

以下では、ディレクトリdebian_based_firmwareに移動したものとして説明し
ます。

3.3. クロス開発環境

ファームウェアの作成に必要なパッケージをインストールします。機種に応
じて以下のコマンドを実行してください。

3.3.1. AX3, A7, A6

  # cd build_ramdisk
  # ./build_crossenv.sh

3.3.2. 600

  # cd build_ramdisk
  # TARGET=obs600 ./build_crossenv.sh

3.4. カーネルソース

3.4.1. 取得

カーネルソースをぷらっとホームのFTPサイトftp.plathome.co.jpからダウン
ロードします。ファイルbuild_ramdisk/config.shのcase文中のKERNELと
PATCHLEVELからカーネルソースのFTPサイトに置いてある場所が分ります。

以下は場所の例です。

TARGET=obsax3, DIST=wheezy, KERNEL=3.2.40, PATCHLEVEL=3の場合
ftp://ftp.plathome.co.jp/pub/OBSAX3/wheezy/3.2.40-3/linux-3.2.40-20131002.tar.gz

TARGET=obsa7, DIST=wheezy, KERNEL=3.2.40, PATCHLEVEL=3の場合
ftp://ftp.plathome.co.jp/pub/OBSA7/wheezy/3.2.40-3/linux-3.2.40-20131002.tar.gz

TARGET=obsa6, DIST=wheezy, KERNEL=3.2.40, PATCHLEVEL=2の場合
ftp://ftp.plathome.co.jp/pub/OBSA6/wheezy/3.2.40-2/linux-3.2.40-20131002.tar.gz

TARGET=obsax3, DIST=squeeze, KERNEL=3.0.6, PATCHLEVEL=14の場合
ftp://ftp.plathome.co.jp/pub/OBSAX3/squeeze/3.0.6-14/source/linux-3.0.6-14.tar.gz

TARGET=obsa6, DIST=squeeze, KERNEL=2.6.31, PATCHLEVEL=8の場合
ftp://ftp.plathome.co.jp/pub/OBSA6/squeeze/2.6.31-8/source/linux-2.6.31-obs-20130131+obsa6_defconfig.tar.gz

TARGET=obs600, DIST=squeeze, KERNEL=2.6.32, PATCHLEVEL=0beta0の場合
ftp://ftp.plathome.co.jp/pub/OBS600/debian/files/wheezy/2.6.32-0beta0/linux-2.6.32-20130819-obs600.tar.gz

3.4.2. 展開

ディレクトリsourceには、TARGETをその名前としたディレクトリがあるので、
そこにカーネルソースを展開してください。その結果、ディレクトリ
source/TARGET/linux-KERNELが作成されます。TARGETとKERNELは、ご自身の
文字列に置き換えてください。

3.5. DVDイメージ

DIST=wheezyの場合、DebianのDVDイメージをDebianのミラーサイトからダウ
ンロードしてディレクトリisofilesにコピーします。DIST=squeezeの場合は
不要です。

ファイルbuild_ramdisk/config.shのcase文中のISOFILEからDVDイメージのフ
ァイル名が分ります。

以下はファイル名の例です。

TARGET=obsax3の場合
debian-7.1.0-armhf-DVD-1.iso

TARGET=obsa7, obsa6の場合
debian-7.1.0-armel-DVD-1.iso

TARGET=obs600の場合
debian-7.2.0-powerpc-DVD-1.iso

4. 作成

ファームウェアを作成します。シェルスクリプトbuild_ramdisk/buildall.sh
のオプション-MにTARGET、-DにDISTを指定します。TARGET=obsax3、
DIST=wheezyの場合、

  # cd build_ramdisk
  # ./buildall.sh -M obsax3 -D wheezy

と実行します。

作成されたファームウェア一式は、ディレクトリ
release/TARGET/DIST/KERNEL-PATCHLEVELに置かれます。TARGET, DIST,
KERNEL, PATCHLEVELは、ご自身の文字列に置き換えてください。

例えば、ディレクトリrelease/obsax3/wheezy/3.2.40-3には、以下のファイ
ルが作成されます。

o MD5.obsax3: MD5チェックサムファイル
o System.map: カーネルのシステムマップファイル
o kernel-image-3.2.40-3.deb: コマンドdpkgなどでインストールするための
  パッケージ
o ramdisk-wheezy.obsax3.img.lzma: ファームウェアのRAMディスクイメージ
o uImage.initrd.obsax3: コマンドflashcfgでインストールするためのファ
  ームウェア
o zImage.gz: ファームウェアのカーネルイメージ

5. カスタマイズ

本節ではファームウェアのカスタマイズの手順を説明します。

シェルスクリプトbuild_ramdisk/buildall.shを実行することは、
DIST=wheezy, TARGET=obsax3の場合、以下の通り実行することと同じです。

  # DIST=wheezy TARGET=obsax3 ./build_debootstrap.sh
  # DIST=wheezy TARGET=obsax3 ./build_kernel.sh
  # DIST=wheezy TARGET=obsax3 ./build_ramdisk.sh
  # DIST=wheezy TARGET=obsax3 ./release_firmware.sh

内容の詳細は各シェルスクリプトを読んでいただくことにして、簡単に説明し
ておきます。以下のTARGETとDISTは、ご自身の文字列に置き換えてください。

o build_debootstrap.sh: debootstrapを実行し、ディレクトリ
  rootfs/DIST_TARGET以下にDebianを仮インストールしています。
o build_kernel.sh: カーネルとカーネルモジュールのコンパイルをしていま
す。
o build_ramdisk.sh: ディレクトリrootfs/DIST_TARGET以下に仮インストー
  ルしたDebianをOpenBlocks用に変更して、RAMディスクイメージを作成して
  います。
o release_firmware.sh: ファームウェア一式を作成しています。

上記のシェルスクリプトを手動で実行すれば、その途中で、カーネルとRAMデ
ィスクイメージのカスタマイズができます。

ファイルbuild_ramdisk/config.shのcase文中のPATCHLEVELには文字列などを
追加、例えば3customとすることをお勧めします。公式ファームウェアとの区
別がはっきりします。

カスタマイズの前に、その準備として、シェルスクリプト
build_ramdisk/buildall.shを実行しておいてください。

5.1. カーネル

カーネルのコンフィグレーションを変更してカーネルをカスタマイズするこ
とができます。
カーネルをカスタマイズしない場合には、「5.2. RAMディスクイメージ」節
に進んでください。

5.1.1. コンフィグレーションの変更

カーネルソースのディレクトリsource/TARGET/linux-KERNELに移動して、コ
ンフィグレーションを変更します。TARGETとKERNELは、ご自身の文字列に置
き換えてください。

AX3, A7, A6の場合

  # make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- menuconfig

600の場合

  # make ARCH=powerpc CROSS_COMPILE=powerpc-linux-gnu- menuconfig

5.1.2. コンフィグレーションのコピー

変更したコンフィグレーションファイル.configをコピーします。

AX3, A7, A6の場合

  # cp -a .config arch/arm/configs/TARGET_defconfig

ここでTARGETは、ご自身の文字列に置き換えてください。

600の場合

  # cp -a .config arch/powerpc/configs/obs600_defconfig

5.1.3. コンパイル

シェルスクリプトbuild_ramdisk/build_kernel.shから順番に実行するか、シ
ェルスクリプトbuild_ramdisk/buildall.shを実行してください。RAMディス
クイメージをカスタマイズする場合、シェルスクリプト
build_ramdisk/build_kernel.shを実行して、次節に進んでください。

5.2. RAMディスクイメージ

シェルスクリプトbuild_ramdisk/build_ramdisk.shの実行が終了すると、デ
ィレクトリrootfs/DIST_TARGETに、RAMディスクに含まれるファイルが仮イン
ストールされます。ディレクトリrootfs/DIST_TARGET以下のファイルを変更
したり、パッケージを追加すれば、RAMディスクイメージのカスタマイズがで
きます。DISTとTARGETは、ご自身のものに置き換えてください。

5.2.1. パッケージの取得

追加するパッケージをDebianのミラーサイトからダウンロードして、ディレ
クトリextradebs/DISTにコピーします。DISTは、ご自身の文字列に置き換え
てください。

5.2.2. パッケージの追加

次のコマンドを実行してパッケージを追加します。DIST=wheezy,
TARGET=obsax3の場合、

  # DIST=wheezy TARGET=obsax3 ./08_add_extra_packages.sh

と実行します。

パッケージが追加されたかは、ファイル
rootfs/DIST_TARGET/var/lib/dpkg/statusで確認できます。TARGETとDISTは、
ご自身の文字列に置き換えてください。

5.2.3. RAMディスクイメージの作成

ディレクトリrootfs/DIST_TARGET以下のファイルをもとにRAMディスクイメー
ジを作成します。TARGETとDISTは、ご自身の文字列に置き換えてください。
DIST=wheezy, TARGET=obsax3の場合、

  # DIST=wheezy TARGET=obsax3 ./99_create_ramdisk.sh

と実行します。

ファームウェアを作成します。DIST=wheezy, TARGET=obsax3の場合、

  # DIST=wheezy TARGET=obsax3 ./release_firmware.sh

と実行します。

5.3. まとめ

一度「5.1.2. コンフィグレーションのコピー」と「5.2.1. パッケージの取
得」をすませておけば、シェルスクリプトbuild_ramdisk/buildall.shを実行
するだけでカスタマイズのすんだファームウェアが作成できます。
