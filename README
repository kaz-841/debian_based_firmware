OpenBlocksファームウェア作成ガイド

ぷらっとホーム株式会社

Copyright (c) 2013-2016 Plat'Home CO., LTD.

1. はじめに

このソフトウェアを使えばOpenBlocksのファームウェアを作成することができます。
内容は、シェルスクリプトとファームウェアに含めるファイルです。

2. 対応ファームウェア

OpenBlocksのファームウェアは、機種(Aシリーズ, IoTシリーズ, 600)と
OS(DebianGNU/Linux)によって異なります。対応しているファームウェアは
下の表をご覧ください。

機種 | Debian | TARGET | DIST    | ARCH
=====|========|========|=========|========
AX3  | 7      | obsax3 | wheezy  | armhf
-----+--------+--------+---------+---------
A7   | 7      | obsa7  | wheezy  | armel
-----+--------+--------+---------+---------
A6   | 7      | obsa6  | wheezy  | armel
-----+--------+--------+---------+---------
600  | 7      | obs600 | wheezy  | powerpc
-----+--------+--------+---------+---------
BX?  | 7      | obsbx1 | wheezy  | i386
-----+--------+--------+---------+---------
EX1  | 7      | obsbx1 | wheezy  | i386


ファームウェアを作成するホストのOSはDebian GNU/Linux 8 (jessie)です。

項目TARGETとDISTは、ファームウェアを作成するときに実行するシェルスク
リプトに指定する文字列です。後節で参照します。

BX?は、BX0，BX1，BX3を表します。

3. 準備

3.1. 作成ホスト

前節の表で、ファームウェアを作成するホストのOSを確認してください。例
えば、機種がOpenBlocks AX3でOSがDebian 7の場合、作成ホストのOSは
Debian 8/amd64です。ホストを用意して、そのOSをインストールします。ホ
ストは物理マシンと仮想マシンのどちらでもよろしいです。インターネット
に接続できるよう、ネッワークの設定をしてください。

3.2. Gitリポジトリの取得

このソフトウェアはGitリポジトリから取得できます。

作成ホストにgitパッケージをインストールします。

  # apt-get update
  # apt-get install git

Gitリポジトリを取得します。

  $ git clone git://github.com/plathome/debian_based_firmware.git

以下では、ディレクトリdebian_based_firmwareに移動したものとして説明し
ます。

3.3. クロス開発環境

ファームウェアの作成に必要なパッケージをインストールします。

  # cd build_ramdisk
  # ./build_crossenv.sh

3.4. カーネルソース

3.4.1. 取得

カーネルソースをぷらっとホームのFTPサイトftp.plathome.co.jpからダウン
ロードします。ファイルbuild_ramdisk/config.shのcase文中のKERNELと
PATCHLEVELからカーネルソースのFTPサイトに置いてある場所が分ります。

以下は場所の例です。

TARGET=obsax3, DIST=wheezy, KERNEL=3.2.40, PATCHLEVEL=4の場合
ftp://ftp.plathome.co.jp/pub/OBSAX3/wheezy/3.2.40-4/linux-3.2.40-20140220.tar.gz

TARGET=obsa7, DIST=wheezy, KERNEL=3.2.40, PATCHLEVEL=4の場合
ftp://ftp.plathome.co.jp/pub/OBSA7/wheezy/3.2.40-4/linux-3.2.40-20140220.tar.gz

TARGET=obsa6, DIST=wheezy, KERNEL=3.2.40, PATCHLEVEL=3の場合
ftp://ftp.plathome.co.jp/pub/OBSA6/wheezy/3.2.40-3/linux-3.2.40-20140220.tar.gz

TARGET=obs600, DIST=wheezy, KERNEL=3.10.25, PATCHLEVEL=0の場合
ftp://ftp.plathome.co.jp/pub/OBS600/debian/files/wheezy/3.10.25-0/linux-3.10.25-obs600.tar.gz

3.4.2. 展開

ディレクトリsourceには、TARGETをその名前としたディレクトリがあるので、
そこにカーネルソースを展開してください。その結果、ディレクトリ
source/TARGET/linux-KERNELが作成されます。TARGETとKERNELは、ご自身の
文字列に置き換えてください。

3.5. DVDイメージ

DIST=wheezyの場合、DebianのDVDイメージをDebianのミラーサイトからダウ
ンロードしてディレクトリisofilesにコピーします。

ファイルbuild_ramdisk/config.shのcase文中のISOFILEからDVDイメージのフ
ァイル名が分ります。

以下はファイル名の例です。

TARGET=obsax3の場合
debian-7.7.0-armhf-DVD-1.iso

TARGET=obsa7, obsa6の場合
debian-7.7.0-armel-DVD-1.iso

TARGET=obs600の場合
debian-7.4.0-powerpc-DVD-1.iso

TARGET=obsbx1の場合
debian-7.8.0-i386-DVD-1.iso

これらのファイルは 
ftp://ftp.plathome.co.jp/pub/cdimages/debian/
から取得できます。

4. 作成

ファームウェアを作成します。シェルスクリプトbuild_ramdisk/buildall.sh
のオプション-MにTARGET、-DにDISTを指定します。TARGET=obsax3、
DIST=wheezyの場合、

  # cd build_ramdisk
  # ./buildall.sh -M obsax3 -D wheezy

と実行します。

作成されたファームウェア一式は、ディレクトリ
release/TARGET/DIST/KERNEL-PATCHLEVELに置かれます。TARGET, DIST,
KERNEL, PATCHLEVELは、ご自身の文字列に置き換えてください。

例えば、ディレクトリrelease/obsax3/wheezy/3.2.40-3には、以下のファイ
ルが作成されます。

o MD5.obsax3: MD5チェックサムファイル
o System.map: カーネルのシステムマップファイル
o kernel-image-3.2.40-3.deb: コマンドdpkgなどでインストールするための
  パッケージ
o ramdisk-wheezy.obsax3.img.lzma: ファームウェアのRAMディスクイメージ
o uImage.initrd.obsax3: コマンドflashcfgでインストールするためのファ
  ームウェア
o zImage.gz: ファームウェアのカーネルイメージ

5. カスタマイズ

本節ではファームウェアのカスタマイズの手順を説明します。

シェルスクリプトbuild_ramdisk/buildall.shを実行することは、
DIST=wheezy, TARGET=obsax3の場合、以下の通り実行することと同じです。

  # DIST=wheezy TARGET=obsax3 ./build_debootstrap.sh
  # DIST=wheezy TARGET=obsax3 ./build_kernel.sh
  # DIST=wheezy TARGET=obsax3 ./build_ramdisk.sh
  # DIST=wheezy TARGET=obsax3 ./release_firmware.sh

TARGETとDISTについては、予め次のように設定することで、毎回の指定は不要
になります。

  # export DIST=wheezy TARGET=obsax3

内容の詳細は各シェルスクリプトを読んでいただくことにして、簡単に説明し
ておきます。以下のTARGETとDISTは、ご自身の文字列に置き換えてください。

o build_debootstrap.sh: debootstrapを実行し、ディレクトリ
  rootfs/DIST_TARGET以下にDebianを仮インストールしています。
o build_kernel.sh: カーネルとカーネルモジュールのコンパイルをしていま
す。
o build_ramdisk.sh: ディレクトリrootfs/DIST_TARGET以下に仮インストー
  ルしたDebianをOpenBlocks用に変更して、RAMディスクイメージを作成して
  います。
o release_firmware.sh: ファームウェア一式を作成しています。

上記のシェルスクリプトを手動で実行すれば、その途中で、カーネルとRAMデ
ィスクイメージのカスタマイズができます。

ファイルbuild_ramdisk/config.shのcase文中のPATCHLEVELには文字列などを
追加、例えば3customとすることをお勧めします。公式ファームウェアとの区
別がはっきりします。

カスタマイズの前に、その準備として、シェルスクリプト
build_ramdisk/buildall.shを実行しておいてください。

5.1. カーネル

カーネルのコンフィグレーションを変更してカーネルをカスタマイズするこ
とができます。
カーネルをカスタマイズしない場合には、「5.2. RAMディスクイメージ」節
に進んでください。

5.1.1. コンフィグレーションの変更

次のコマンドを実行して、カーネルのコンフィグレーションを変更します。
TARGETとDISTは、ご自身の文字列に置き換えてください。

  # DIST=wheezy TARGET=obsax3 ./kernel_menuconfig.sh

変更したコンフィグレーションファイルは
source/TARGET/linux-KERNEL.dot.configにコピーされます。TARGETとKERNEL
は、ご自身の文字列に置き換えてください。

5.1.2. コンパイル

シェルスクリプトbuild_ramdisk/build_kernel.shから順番に実行するか、シ
ェルスクリプトbuild_ramdisk/buildall.shを実行してください。RAMディス
クイメージをカスタマイズする場合、シェルスクリプト
build_ramdisk/build_kernel.shを実行して、次節に進んでください。

5.2. RAMディスクイメージ

シェルスクリプトbuild_ramdisk/build_ramdisk.shの実行が終了すると、デ
ィレクトリrootfs/DIST_TARGETに、RAMディスクに含まれるファイルが仮イン
ストールされます。ディレクトリrootfs/DIST_TARGET以下のファイルを変更
したり、パッケージを追加すれば、RAMディスクイメージのカスタマイズがで
きます。DISTとTARGETは、ご自身のものに置き換えてください。

5.2.1. パッケージの取得

追加するパッケージをDebianのミラーサイトからダウンロードして、ディレ
クトリextradebs/DISTにコピーします。DISTは、ご自身の文字列に置き換え
てください。

5.2.2. パッケージの追加

次のコマンドを実行してパッケージを追加します。DIST=wheezy,
TARGET=obsax3の場合、

  # DIST=wheezy TARGET=obsax3 ./08_add_extra_packages.sh

と実行します。

パッケージが追加されたかは、ファイル
rootfs/DIST_TARGET/var/lib/dpkg/statusで確認できます。TARGETとDISTは、
ご自身の文字列に置き換えてください。

5.2.3. RAMディスクイメージの作成

ディレクトリrootfs/DIST_TARGET以下のファイルをもとにRAMディスクイメー
ジを作成します。TARGETとDISTは、ご自身の文字列に置き換えてください。
DIST=wheezy, TARGET=obsax3の場合、

  # DIST=wheezy TARGET=obsax3 ./99_create_ramdisk.sh

と実行します。

ファームウェアを作成します。DIST=wheezy, TARGET=obsax3の場合、

  # DIST=wheezy TARGET=obsax3 ./release_firmware.sh

と実行します。

5.3. まとめ

一度「5.1.1. コンフィグレーションの変更」と「5.2.1. パッケージの取得」
をすませておけば、シェルスクリプトbuild_ramdisk/buildall.shを実行する
だけでカスタマイズのすんだファームウェアが作成できます。

6. ファームウェアの更新

ファームウェアパッケージkernel-image-KERNEL-PATCHLEVEL-TARGET.debをOpenBlocksに
ネットワーク経由もしくはUSBメモリでコピーしてください。KERNEL，PATCHLEVELと
TARGETは、ご自身の文字列に置き換えてください。

次のコマンド

  # dpkg -i kernel-image-KERNEL-PATCHLEVEL-TARGET.deb

を実行してください。

ramdiskモードの場合はflashcfgコマンドを実行することをお勧めします。
ファームウェアのバージョンとDebianパッケージのリポジトリ内のバージョンが
合わなくなる場合があります。（合わなくても動作に影響はありません。）

  # flashcfg -S

再起動すれば、ファームウェアの更新は終了です。

